# file opened: c:\Users\cpujo\Desktop\Aoc\MasterMind\plantilla.asm
  1   0000                      DEVICE ZXSPECTRUM48
  2   0000                      org $8000
  3   8000                ; Programa ubicado a partir de $8000 = 32768
  4   8000
  5   8000 F3           inicio:         di              ; Deshabilitar interrupciones
  6   8001 31 00 00                     ld sp,0         ; Establecer el puntero de pila en la parte alta de la memoria
  7   8004
  8   8004              ;-------------------------------------------------------------------------------------------------
  9   8004              ;Código del estudiante
 10   8004
 11   8004 CD 3A 80         CALL pantalla
 12   8007 CD 57 84         CALL pruebac
 13   800A
 14   800A 21 49 58          ld hl,$5849;pondremos hl en esa direccion para probar el funcionamiento
 15   800D 0E 0A            ld c,10
 16   800F
 17   800F              Juego:
 18   800F C5              push bc
 19   8010 3A E7 84        ld a,(intento_actual)
 20   8013 57              ld d,a
 21   8014 06 01            ld b,1
 22   8016
 23   8016 DD 21 EA 84      ld ix,intento;apunta a intento
 24   801A              BucleIntentosInt:;este bucle pasa
 25   801A CD 84 80         CALL JugarSlot
 26   801D 7E                ld a ,(hl);meto el valor de hl en a
 27   801E DD 77 00          ld (ix),a; meto el valor en intento
 28   8021
 29   8021 DD 23                inc ix; incremeto intento para que el siguiente lo meta en intento +1
 30   8023
 31   8023 23                   inc hl
 32   8024 23                   inc hl
 33   8025 05                   dec b
 34   8026 20 F2            jr nz,BucleIntentosInt
 35   8028 7A               ld a,d
 36   8029 3C               inc a
 37   802A 57               ld d,a
 38   802B 32 E7 84          ld (intento_actual),a
 39   802E
 40   802E CD 6F 84         CALL reset_copia
 41   8031 CD FB 84         CALL slot_XY
 42   8034 C1               pop bc
 43   8035 0D               dec c
 44   8036 20 D7           jr nz,Juego
 45   8038
 46   8038
 47   8038              ;-------------------------------------------------------------------------------------------------
 48   8038 18 FE        fin:            jr fin          ; Bucle infinito
 49   803A
 50   803A                      include "pantalla.asm"
# file opened: c:\Users\cpujo\Desktop\Aoc\MasterMind\pantalla.asm
  1+  803A              pantalla:
  2+  803A 3E 00               ld a,$00
  3+  803C D3 FE               out($fe),a ;Ponemos el marco negro
  4+  803E 21 28 58            ld hl,$5828 ;posicion 5828 para poner el tablero en el medio
  5+  8041 06 0A               ld b,10;bucle exterior
  6+  8043 11 28 58             ld de,$5828 ;Uso de variable de como auxiliar para guardar cada linea
  7+  8046 62 6B                ld hl,de
  8+  8048              bucleext;
  9+  8048 0E 0F                ld c,15;control de bucle 1
 10+  804A 3E 09                ld a,$09 ;color a
 11+  804C
 12+  804C              bucle1: ;bucle para hacer lineas horizontales menos la ultima de todas
 13+  804C
 14+  804C 77                  ld(hl),a  ;cargo el color en su sitio
 15+  804D 23                  inc hl; ;incremento para que haga la linea
 16+  804E 0D                   dec c;decremento c para que no sea bucle infinito(variable del bucle)
 17+  804F 20 FB               jr nz, bucle1; usamos jr para que tenga como referencia el decremento de c
 18+  8051 0E 11               ld c,17;
 19+  8053              buclepr:
 20+  8053 23                   inc hl;
 21+  8054 0D                   dec c;
 22+  8055 20 FC                jr nz,buclepr
 23+  8057 0E 04                ld c,4 ;declaramos c para el siguiente bucle
 24+  8059              bucleaux: ;este bucle realizará los slots.
 25+  8059 3E 09                ld a,$09 ;cargo el color azul en a
 26+  805B 77                   ld (hl),a ;lo metemos en la posición de hl para que lo pinte
 27+  805C 23                   inc hl ;incremento hl para meter el siguiente color
 28+  805D 3E 01                ld a,$01 ;cargo negro en a
 29+  805F 77                   ld(hl),a ;cargo en la posición de hl para que  lo pinte
 30+  8060 23                   inc hl ; incremento hl para meter el siguiente color
 31+  8061 0D                   dec c ; decremento c para que haga 4 veces el bucle
 32+  8062 20 F5                jr nz,bucleaux ;utilizo jr nz para que coja c como variable
 33+  8064
 34+  8064 3E 09                ld a,$09 ;Cargo el color azul otra vez para realizar la evaluación de aciertos
 35+  8066 77                   ld (hl),a ;Cargo en hl,que será el borde del rectangulo
 36+  8067 23                   inc hl
 37+  8068 3E 01                ld a,$01 ;Cargo el color negro y a continuación realizo un bucle donde me pinte los 5 de color negro
 38+  806A 0E 05                ld c,5
 39+  806C              bucleaux2:
 40+  806C 77                   ld (hl),a
 41+  806D 23                   inc hl
 42+  806E 0D                   dec c
 43+  806F 20 FB                jr nz,bucleaux2
 44+  8071 3E 09                ld a,$09 ;Vuelvo a cargar en azul para realizar el borde
 45+  8073 77                   ld (hl),a
 46+  8074 0E 12                ld c,18;
 47+  8076              buclepr2:
 48+  8076 23                   inc hl;
 49+  8077 0D                   dec c;
 50+  8078 20 FC                jr nz,buclepr2
 51+  807A 10 CC                djnz bucleext; Finaliza el bucle principal,donde pintará todo menos la ultima linea inferior
 52+  807C 0E 0F                ld c,15 ;Cargo 15 en c para que me haga la linea 15 pixeles
 53+  807E              bucleinf: ;hago el bucle para que pinte las 15 lineas
 54+  807E 77                   ld(hl),a
 55+  807F 23                   inc hl
 56+  8080 0D                   dec c
 57+  8081 20 FB                jr nz,bucleinf ;finaliza el bucle de la linea inferior
 58+  8083 C9                   RET
# file closed: c:\Users\cpujo\Desktop\Aoc\MasterMind\pantalla.asm
 51   8084                      include "Teclado.asm"
# file opened: c:\Users\cpujo\Desktop\Aoc\MasterMind\Teclado.asm
  1+  8084              JugarSlot:
  2+  8084 1E 00                ld e,$00;funcion que usaremos para que nos almacene cada color
  3+  8086              bucleteclas:
  4+  8086 CD 91 80         CALL EsperarSoltar;llamamos a la funcion EsperarSoltar
  5+  8089 CD 9A 80         CALL EsperarPulsar
  6+  808C
  7+  808C
  8+  808C FE 01            cp $01;Si a se pone a $01 se termina el bucle
  9+  808E 20 F6            jr nz,bucleteclas;
 10+  8090 C9                   RET
 11+  8091              EsperarSoltar:;se comprueba si la tecla q es pulsada
 12+  8091 3E FB                ld a,$fb
 13+  8093 DB FE                in a,($fe)
 14+  8095 FE FF                cp $FF   ;comprobamos si toda la fila está pulsada
 15+  8097 20 F8                jr nz,EsperarSoltar;el bucle sigue hasta que se dejen de pulsar las teclas
 16+  8099 C9                   RET
 17+  809A
 18+  809A              EsperarPulsar:
 19+  809A 3E FB                ld a,$fb
 20+  809C DB FE                in a,($fe)
 21+  809E CB 47                bit 0,a;Tecla Q
 22+  80A0 28 12                jr z,TeclaQPulsada;comprobamos que la tecla q está pulsada,si pulsa salta a la función
 23+  80A2 3E FB                ld a,$fb
 24+  80A4 DB FE                in a,($fe)
 25+  80A6 CB 4F                bit 1,a;tecla W
 26+  80A8 28 14                jr z,TeclaWPulsada;comprobamos que la tecla w está pulsada,si pulsa salta a la función
 27+  80AA 3E FB                ld a,$fb
 28+  80AC DB FE                in a,($fe)
 29+  80AE CB 67                bit 4,a;Tecla T
 30+  80B0 28 16                jr z,TeclaTPulsada; comprobamos que la tecla t está pulsada,si pulsa salta a la función
 31+  80B2 18 E6                jr EsperarPulsar; el bucle no para hasta pulsar una tecla
 32+  80B4
 33+  80B4              TeclaQPulsada:;entra aqui si esta pulsando una tecla q
 34+  80B4 7B                   ld a,e
 35+  80B5 C6 08               add $08;sumamos el color a e
 36+  80B7 77                   ld(hl),a
 37+  80B8 5F                   ld e,a
 38+  80B9 FE 40               cp $40; si pasa el ultimo color salta al ReinicioColor1 que pone el color de e al primer color
 39+  80BB 28 0E               jr z,ReinicioColor1
 40+  80BD C9                   RET
 41+  80BE
 42+  80BE              TeclaWPulsada:
 43+  80BE 7B                   ld a,e
 44+  80BF D6 08                sub $08;al pusar la tecla w,restamos el color a e
 45+  80C1 77                   ld(hl),a
 46+  80C2 5F                   ld e,a
 47+  80C3 FE 00                cp $00; si llega al primero,reiniciamos el color para que llegue al último
 48+  80C5 28 08                jr z,ReinicioColor2
 49+  80C7 C9                   RET
 50+  80C8              TeclaTPulsada:;si pulsa la tecla t a=1,lo usaremos para finalizar el programa
 51+  80C8 3E 01                ld a,1
 52+  80CA C9                   RET
 53+  80CB
 54+  80CB              ReinicioColor1:;Esta tecla pone el color e al principio
 55+  80CB 1E 00                ld e,$00
 56+  80CD 28 CB                jr z,EsperarPulsar
 57+  80CF              ReinicioColor2:;Esta tecla pone el color e al final
 58+  80CF 1E 32                ld e,$32
 59+  80D1 28 C7                jr z,EsperarPulsar
# file closed: c:\Users\cpujo\Desktop\Aoc\MasterMind\Teclado.asm
 52   80D3                      include "printat.asm"
# file opened: c:\Users\cpujo\Desktop\Aoc\MasterMind\printat.asm
  1+  80D3              ; -------------------------------
  2+  80D3              ; ZX Spectrum Text print library
  3+  80D3              ; Daniel León - AOC - UFV 2020
  4+  80D3              ; -------------------------------
  5+  80D3
  6+  80D3
  7+  80D3              ; ----------------------------------------------------------------------------------------
  8+  80D3              ; PRINTAT - Print a string in a position and attributes as per registers:
  9+  80D3              ;		IN	A	: Bit 7=1 For Flash / Bit 6=1 For Brigh / Bit 5,4,3 for Paper / Bit 2,1,0 for Ink
 10+  80D3              ;		IN	B	: Row 0..23
 11+  80D3              ;		IN	C	: Column 0..31
 12+  80D3              ;		IN	IX	: Address of text (Text must end in a 0)
 13+  80D3              ; ----------------------------------------------------------------------------------------
 14+  80D3 CD E2 80     PRINTAT:	CALL PREP_PRT				; Update Attribute var &Screen & Attributes pointers
 15+  80D6              ; ----------------------------------------------------------------------------------------
 16+  80D6              ;		VVV Do not move PRINTSTR below as PRINTAT continues into PRINTSTR routine
 17+  80D6              ; ----------------------------------------------------------------------------------------
 18+  80D6              ; PRINTSTR - Prints String - IX Points to the String start
 19+  80D6              ; ----------------------------------------------------------------------------------------
 20+  80D6 DD 7E 00     PRINTSTR:   LD A,(IX)					; A Contains first char to print
 21+  80D9 B7           			OR A						; check for end of string (0)
 22+  80DA C8           			RET Z						; Finish printing if 0
 23+  80DB CD 10 81     			CALL PRINTCHNUM
 24+  80DE DD 23        			INC IX						; Move to next char in string
 25+  80E0 18 F4        			JR PRINTSTR					; Start over printing sequence
 26+  80E2              ; ----------------------------------------------------------------------------------------
 27+  80E2
 28+  80E2
 29+  80E2              ;-----------------------------------------------------------------------------------------
 30+  80E2              ; PREP_PRT - Updates Print_Attr, SCR & ATTR Vars
 31+  80E2              ;-----------------------------------------------------------------------------------------
 32+  80E2 32 56 81     PREP_PRT:	LD (PRINT_ATTR),A			; Set Attribute
 33+  80E5 CD EB 80     PREP_PRT_2:	CALL CRtoSCREEN
 34+  80E8 C3 FD 80     			JP CRtoATTR
 35+  80EB              ;-----------------------------------------------------------------------------------------
 36+  80EB
 37+  80EB              ;-----------------------------------------------------------------------------------------
 38+  80EB              ; CRtoSCREEN - Converts a scr char coord into a SCREEN Address   b,c = y,x positions
 39+  80EB              ;	IN  - B=Row, C=Column
 40+  80EB              ;	OUT - HL=Address in screen also stored in (SCR_CUR_PTR)
 41+  80EB              ;	Conversion:
 42+  80EB              ;			Row FFfff   Column CCCCC
 43+  80EB              ;			HL=%010FF000 fffCCCCC
 44+  80EB              ;-----------------------------------------------------------------------------------------
 45+  80EB              CRtoSCREEN:
 46+  80EB 78           			LD A,B						; %___FFfff
 47+  80EC F6 40        			OR #40						; %010FFfff
 48+  80EE E6 F8        			AND #F8						; %010FF000
 49+  80F0 67           			LD H,A
 50+  80F1
 51+  80F1 78           			LD A,B						; %___FFfff
 52+  80F2 E6 07        			AND #7						; %00000fff
 53+  80F4 0F           			RRCA						; %f00000ff
 54+  80F5 0F           			RRCA						; %ff00000f
 55+  80F6 0F           			RRCA						; %fff00000
 56+  80F7 B1           			OR C						; %fffCCCCC
 57+  80F8 6F           			LD L,A
 58+  80F9 22 52 81                 LD (SCR_CUR_PTR),HL			; Update Variable
 59+  80FC C9                       RET
 60+  80FD              ; ----------------------------------------------------------------------------------------
 61+  80FD
 62+  80FD
 63+  80FD
 64+  80FD              ;-----------------------------------------------------------------------------------------
 65+  80FD              ; CRtoATTR - Converts a screen char coord  into a ATTR Address  b,c = y,x positions
 66+  80FD              ;	IN  - B=Row, C=Column
 67+  80FD              ;	OUT - HL=Address in screen also stored in (SCR_ATTR_PTR)
 68+  80FD              ;	Conversion:
 69+  80FD              ;			Row FFfff   Column CCCCC
 70+  80FD              ;			HL=%010110FF fffCCCCC
 71+  80FD              ;-----------------------------------------------------------------------------------------
 72+  80FD              CRtoATTR:
 73+  80FD 78           			LD A,B						; %___FFfff
 74+  80FE 0F           			RRCA						; %f000FFff
 75+  80FF 0F           			RRCA						; %ff000FFf
 76+  8100 0F           			RRCA						; %fff000FF
 77+  8101 6F           			LD L,A
 78+  8102 E6 03        			AND 3						; %000000FF	value of FF can be only 00,01,10
 79+  8104 F6 58        			OR #58						; %010110FF value will be #58, #59 or #5A
 80+  8106 67           			LD H,A
 81+  8107
 82+  8107 7D           			LD A,L						; %fff000FF
 83+  8108 E6 E0        			AND #E0						; %fff00000
 84+  810A B1           			OR C						; %fffCCCCC
 85+  810B 6F           			LD L,A
 86+  810C
 87+  810C 22 54 81                 LD (SCR_ATTR_PTR),HL		; Update Variable
 88+  810F C9                       RET
 89+  8110              ; ----------------------------------------------------------------------------------------
 90+  8110
 91+  8110
 92+  8110
 93+  8110              ; ----------------------------------------------------------------------------------------
 94+  8110              ; PRINTCHNUM - Prints Char Number N (stored in A)
 95+  8110              ;-----------------------------------------------------------------------------------------
 96+  8110              PRINTCHNUM:	;SUB 32						; Adjust Ascii to charset
 97+  8110 26 00        			LD H,0						; Multiply value by 8 to get to right Char in Charset
 98+  8112 6F           			LD L,A
 99+  8113 29           			ADD HL,HL
100+  8114 29           			ADD HL,HL
101+  8115 29           			ADD HL,HL
102+  8116 11 57 80     			LD DE, CHARSET-(8*32)		; Optimize in compile time (instead of sub 32)
103+  8119 19           			ADD HL,DE
104+  811A EB           			EX  DE,HL					;Value in DE
105+  811B              			; Continues to printchar below
106+  811B              ; ----------------------------------------------------------------------------------------
107+  811B
108+  811B
109+  811B              ; ----------------------------------------------------------------------------------------
110+  811B              ; PRINTCHAR - Prints Char  (DE points to the char. Uses HL as last Cur Pointer)
111+  811B              ; ----------------------------------------------------------------------------------------
112+  811B              PRINTCHAR:
113+  811B 06 08        			LD B,8						; 8 Lines per char
114+  811D 2A 52 81                 LD HL, (SCR_CUR_PTR)		; Load Cursor Pointer y,x
115+  8120
116+  8120 1A           BYTEPCHAR:	LD A,(DE)					; Get Char to be printed, first line
117+  8121 77           			LD (HL),A					; Move to Printing location
118+  8122 24                       INC H						; inc H so next line in char (ZX Spectrum Screen RAM)
119+  8123 13                       INC DE 						; next line to be printed
120+  8124 10 FA                    DJNZ BYTEPCHAR				; Repeat 8 lines
121+  8126 3A 56 81                 LD A,(PRINT_ATTR) 			; Load Attributes to print char with
122+  8129 2A 54 81                 LD HL, (SCR_ATTR_PTR)
123+  812C 77                       LD (HL),A
124+  812D 21 54 81                 LD HL, SCR_ATTR_PTR			; Get pointer to ATTR
125+  8130 34                       INC (HL)					; Move Attribute cursor to next char
126+  8131 21 52 81     			LD HL, SCR_CUR_PTR
127+  8134 34           			INC (HL)					; update Cursor pointer to next position
128+  8135 C9                       RET
129+  8136              ; ----------------------------------------------------------------------------------------
130+  8136
131+  8136
132+  8136
133+  8136              ; ----------------------------------------------------------------------------------------
134+  8136              ; INK2PAPER - moves ink of attribute stored in (PRINT_ATTR) to paper and sets ink to 0
135+  8136              ; 				Sets bright 1 and flash 0
136+  8136              ; ----------------------------------------------------------------------------------------
137+  8136 3A 56 81     INK2PAPER:	LD A, (PRINT_ATTR)		    ; Get storedAttribute
138+  8139 E6 07                    AND 7						; get Attr INK in A
139+  813B 07           			RLCA
140+  813C 07           			RLCA
141+  813D 07           			RLCA						; move Ink to Paper
142+  813E F6 40        			OR 64						; ink 0 bright 1
143+  8140 32 56 81     			LD (PRINT_ATTR),A		    ; Get storedAttribute
144+  8143 C9           			RET
145+  8144              ; ----------------------------------------------------------------------------------------
146+  8144
147+  8144
148+  8144
149+  8144
150+  8144 21 00 40     CLEARSCR:	LD HL,$4000					; Erases screen by writing 0 to all pixels and attributes
151+  8147 11 01 40     			LD DE,$4001
152+  814A 01 FF 1A     			LD BC,6911
153+  814D 36 00        			LD (HL),0
154+  814F ED B0        			LDIR
155+  8151 C9           			RET
156+  8152
157+  8152
158+  8152              SCR_CUR_PTR
158+  8152 00 00          	db $00, $00				; Cursor Pointer in Screen (2 bytes) (HL)
159+  8154 00 00        SCR_ATTR_PTR: 	db $00, $00				; Attr Pointer in Screen (2 bytes) (HL)
160+  8156 00           PRINT_ATTR:		db $00					; Attribute used by printchar routine (1 byte)
161+  8157
162+  8157              CHARSET: incbin "charset.bin"			; Charset used
163+  8457
# file closed: c:\Users\cpujo\Desktop\Aoc\MasterMind\printat.asm
 53   8457                      include "Intento.asm"
# file opened: c:\Users\cpujo\Desktop\Aoc\MasterMind\Intento.asm
  1+  8457              pruebac:
  2+  8457 0E 00            ld c,0
  3+  8459 06 00            ld b,0
  4+  845B 3E 06            ld a,%00000110
  5+  845D DD 21 DD 84      ld ix,Texto1
  6+  8461 CD D3 80         call PRINTAT
  7+  8464 0E 00            ld c,0
  8+  8466 06 00            ld b,0
  9+  8468 3E 06            ld a,%00000110
 10+  846A DD 21 DD 84      ld ix,Texto1
 11+  846E C9               RET
# file closed: c:\Users\cpujo\Desktop\Aoc\MasterMind\Intento.asm
 54   846F                      include "validacion.asm"
# file opened: c:\Users\cpujo\Desktop\Aoc\MasterMind\validacion.asm
  1+  846F
  2+  846F              ;pos inicial intento: 5849 ; +2, 3veces
  3+  846F              ;pos inicial respuesta: 5851 ; +1, 3veces
  4+  846F
  5+  846F              ;--------------- VALIDAR -------------------------
  6+  846F
  7+  846F
  8+  846F
  9+  846F              reset_copia:
 10+  846F
 11+  846F 01 04 00             LD BC, num_slots ;num_slots numero cuadrados en cada intento
 12+  8472 21 EF 84             LD HL, quiz
 13+  8475 11 F4 84             LD DE, copia
 14+  8478 ED B0                LDIR ;copio BC n? de slots de HL en DE
 15+  847A
 16+  847A 3A F9 84             LD A,(negros)
 17+  847D 5F                   LD E,A
 18+  847E DD 21 EA 84          LD IX, intento ;ix usualmente para leer db
 19+  8482                      ;datos de entrada no deber?an tocarse
 20+  8482 FD 21 F4 84          LD IY, copia   ;iy tb
 21+  8486
 22+  8486
 23+  8486 06 04                LD B, num_slots
 24+  8488 0E 04                LD C, 4;para que en la pasada de blancos me haga las 4 pasadas de IX nada m?s (el de copia)
 25+  848A
 26+  848A              B1:
 27+  848A DD 7E 00             LD A, (IX);cargo el primer elemento en a
 28+  848D FD 56 00             LD D, (IY);cargo el primer elemento en d
 29+  8490
 30+  8490 BA                   CP D;comparo D con A
 31+  8491
 32+  8491 20 09                JR NZ, B2; si no coincide salto a B2
 33+  8493
 34+  8493 1C                   INC E;aumento contador de negros
 35+  8494
 36+  8494                      ;entra bien aqui solo en elementos coincidentes
 37+  8494
 38+  8494                      ;al coincidir se cambia pero solo se busca la primera coincidencia no las de despues
 39+  8494                      ;creo que asi me va a leer la coincidencia en el bucle anidado a lo mejor poner IX 128 e IY a 255
 40+  8494 DD 36 00 80          LD (IX), 128;sustituye por 128
 41+  8498 FD 36 00 FF          LD (IY), 255;sustituye por 128
 42+  849C              B2:
 43+  849C DD 23                INC IX;siguiente elemento de la lista
 44+  849E FD 23                INC IY;siguiente elemento de la lista
 45+  84A0
 46+  84A0
 47+  84A0 10 E8                DJNZ B1
 48+  84A2              ; Acabo b1 y reseteo a posicion inicial IX e IY
 49+  84A2 7B                   LD A, E
 50+  84A3 32 F9 84             LD (negros), A;guardo el n? negros
 51+  84A6 3A F9 84             LD A, (negros)
 52+  84A9
 53+  84A9
 54+  84A9                      ;obtengo el n? de negros y lo guardo en e
 55+  84A9 3A FA 84             LD A,(blancos)
 56+  84AC 5F                   LD E, A
 57+  84AD
 58+  84AD 06 04                LD B, num_slots;reseteamos b
 59+  84AF              reset1_IXIY:
 60+  84AF DD 2B                DEC IX
 61+  84B1 FD 2B                DEC IY
 62+  84B3 10 FA                DJNZ reset1_IXIY
 63+  84B5
 64+  84B5              carga_pre_comp:
 65+  84B5 06 04                LD B, num_slots
 66+  84B7
 67+  84B7              CompBlanco1:;comparo para encontrar blancos
 68+  84B7
 69+  84B7                      ;carga en a y d para que siempre tengan los ultimos valores de ix
 70+  84B7 DD 7E 00             LD A, (IX);cargo el primer elemento en a
 71+  84BA FD 56 00             LD D, (IY);cargo el primer elemento en d
 72+  84BD
 73+  84BD BA                   CP D;comparo D con A
 74+  84BE
 75+  84BE 20 09                JR NZ, CompBlanco2 ;si no son iguales salto a
 76+  84C0
 77+  84C0 1C                   INC E;registro ? (E es para que compile) que representa los blancos
 78+  84C1
 79+  84C1                      ;INC IX      si encuentro coincidencia no puede haber otra con el mismo numero entonces hago salto
 80+  84C1 DD 36 00 80          LD (IX), 128;sustituye por 128
 81+  84C5 FD 36 00 FF          LD (IY), 255;sustituye por 128
 82+  84C9
 83+  84C9
 84+  84C9
 85+  84C9                      ;esto se deberia hacer pero entonces deberia controlar el numero de pasadas que hacer de iy
 86+  84C9                      ;JR reset2_IY hago el salto porque una vez encontrdo coincidencia
 87+  84C9
 88+  84C9              CompBlanco2:;Incremento la posici?n de IY 4 veces por posicion de IX y luego aumento IX 4 veces
 89+  84C9 FD 23                INC IY;incremento 1
 90+  84CB
 91+  84CB 10 EA                DJNZ CompBlanco1;cuando he recorrido todo IY paso al siguiente IX
 92+  84CD DD 23                INC IX
 93+  84CF
 94+  84CF
 95+  84CF 06 04                LD B, num_slots;reseteamos b
 96+  84D1              reset2_IY:
 97+  84D1 FD 2B                DEC IY
 98+  84D3 10 FC                DJNZ reset2_IY
 99+  84D5                      ;aqui ya tengo la siguiente de la solucion pero para repetir necesito un registro
100+  84D5
101+  84D5              ;------------------------- Solucionar
102+  84D5
103+  84D5                      ;que registro?
104+  84D5                      ;DEC registro;aqui disminuyes un registro que guarde numero de slots contador para IX hasta pasar por todo IX
105+  84D5 0D                   DEC C
106+  84D6              ;------------------------
107+  84D6
108+  84D6 20 DD                JR NZ, carga_pre_comp
109+  84D8
110+  84D8                      ;guardo numero de blancos en A para almacenarlo en la variable blancos
111+  84D8 7B                   LD A, E
112+  84D9 32 FA 84             LD (blancos), A
113+  84DC
114+  84DC C9                   RET
115+  84DD
116+  84DD
# file closed: c:\Users\cpujo\Desktop\Aoc\MasterMind\validacion.asm
 55   84DD
 56   84DD 4E 20 49 6E  Texto1: defm "N Intento",0
 56   84E1 74 65 6E 74
 56   84E5 6F 00
 57   84E7
 58   84E7 00 00 00     intento_actual DB 0,0,0;se guarda en el primer 0 el intento(ld(intento),a->numero de intentos,se saca ld a ,(intento),el segundo 0 es la posicion del primer slot,el tercer 0 es la posición del espacio de validación)
 59   84EA 08 00 00 00  intento DB 8, 0, 0, 0, 0;Intento jugador
 59   84EE 00
 60   84EF 08 08 04 05  quiz DB 8, 8, 4, 5, 0;Combinacion ganadora
 60   84F3 00
 61   84F4
 62   84F4
 63   84F4 00 00 00 00  copia DB 0, 0, 0, 0, 0;copia quiz
 63   84F8 00
 64   84F9 04           negros DB 4;aciertos
 65   84FA 00           blancos DB 0;color pero no la posicion
 66   84FB
 67   84FB              num_slots EQU 4;variable
 68   84FB              slot_XY:
 69   84FB 21 49 58             ld hl,$5849;slot1
 70   84FE 3A E7 84             ld a,(intento_actual);mete el numero de intento en a
 71   8501
 72   8501 11 40 00             ld de,$40; de lo uso para sumar
 73   8504 47                    ld b,a;b es igual a
 74   8505              BucleFila:
 75   8505 19                   add hl,de
 76   8506 10 FD                djnz BucleFila
 77   8508 C9                   RET
 78   8509
# file closed: c:\Users\cpujo\Desktop\Aoc\MasterMind\plantilla.asm
