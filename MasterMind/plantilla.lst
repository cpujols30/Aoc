# file opened: c:\Users\cpujo\Desktop\Aoc\MasterMind\plantilla.asm
  1   0000                      DEVICE ZXSPECTRUM48
  2   0000                      org $8000
  3   8000                ; Programa ubicado a partir de $8000 = 32768
  4   8000
  5   8000 F3           inicio:         di              ; Deshabilitar interrupciones
  6   8001 31 00 00                     ld sp,0         ; Establecer el puntero de pila en la parte alta de la memoria
  7   8004
  8   8004              ;-------------------------------------------------------------------------------------------------
  9   8004              ;Código del estudiante
 10   8004                  ;PANTALLA DE INICIO
 11   8004 CD 2D 85         CALL pause;llamamos la pausa para que quede mejor el inicio del juego
 12   8007 CD 43 80         CALL pantalla;Dibujamos el tablero
 13   800A CD 5E 84         CALL Texto1Pint;Dibujamos el texto de la izquierda
 14   800D
 15   800D 21 49 58         ld hl,$5849;pondremos hl en esa direccion para probar el funcionamiento
 16   8010 0E 0A            ld c,10;ponemos c a 10 ya que son 10 intentos.
 17   8012
 18   8012              Juego:
 19   8012 C5              push bc;nos guardamos c ya que la vamos a usar dentro del programa
 20   8013 3A 41 85        ld a,(intento_actual)
 21   8016 57              ld d,a;intento actual se almacena en d para saber a que slot ir
 22   8017 06 04            ld b,4
 23   8019
 24   8019 DD 21 44 85      ld ix,intento;apunta a intento para ir guardando los intentos.
 25   801D D5               push de
 26   801E E5                push hl;nos guardamos la posición del slot primero en la pila
 27   801F
 28   801F              BucleIntentosInt:;este bucle pasa 4 veces,que son el número de slot
 29   801F CD 8B 80         CALL JugarSlot;llamamos a JugarSlot para que juegue en el slot
 30   8022 7E               ld a,(hl);meto el valor de hl en a
 31   8023 DD 77 00         ld (ix),a; meto el valor que ha introducido el usuario en intento
 32   8026
 33   8026 DD 23                inc ix; incremeto intento para que el siguiente lo meta en intento +1
 34   8028
 35   8028 23                   inc hl;incrementamos hl 2 veces  para que vaya al siguiente slot.
 36   8029 23                   inc hl
 37   802A 05                   dec b;decrementamos b para hacer el bucle 2 veces
 38   802B 20 F2            jr nz,BucleIntentosInt
 39   802D                 ;una vez termina el bucle llamamos a la función validación.
 40   802D CD 76 84         CALL reset_copia;validación
 41   8030 E1               pop hl;sacamos hl para que esté en el primer slot de la fila que toca.
 42   8031 CD E4 84         CALL PintarColor;Llamamos a la función para que pinte en la validación
 43   8034 D1               pop de;sacamos d
 44   8035 7A               ld a,d;metemos a en d y la incrementamos
 45   8036 3C               inc a
 46   8037 32 41 85         ld (intento_actual),a
 47   803A
 48   803A
 49   803A CD 1F 85         CALL slot_XY;incremento hl en base al numero de intentos que hay
 50   803D C1               pop bc;sacamos bc para poder continuar con el bucle Juego.
 51   803E 0D               dec c;
 52   803F 20 D1           jr nz,Juego
 53   8041
 54   8041
 55   8041              ;-------------------------------------------------------------------------------------------------
 56   8041 18 FE        fin:            jr fin          ; Bucle infinito
 57   8043              ;incluimos las rutinas externas
 58   8043                      include "pantalla.asm"
# file opened: c:\Users\cpujo\Desktop\Aoc\MasterMind\pantalla.asm
  1+  8043              pantalla:
  2+  8043 3E 00               ld a,$00
  3+  8045 D3 FE               out($fe),a ;Ponemos el marco negro
  4+  8047 21 28 58            ld hl,$5828 ;posicion 5828 para poner el tablero en el medio
  5+  804A 06 0A               ld b,10;bucle exterior
  6+  804C 11 28 58             ld de,$5828 ;Uso de variable de como auxiliar para guardar cada linea
  7+  804F 62 6B                ld hl,de
  8+  8051              bucleext;
  9+  8051 0E 0F                ld c,15;control de bucle 1
 10+  8053 3E 09                ld a,$09 ;color a
 11+  8055
 12+  8055              bucle1: ;bucle para hacer lineas horizontales menos la ultima de todas
 13+  8055
 14+  8055 77                  ld(hl),a  ;cargo el color en su sitio
 15+  8056 23                  inc hl; ;incremento para que haga la linea
 16+  8057 0D                   dec c;decremento c para que no sea bucle infinito(variable del bucle)
 17+  8058 20 FB               jr nz, bucle1; usamos jr para que tenga como referencia el decremento de c
 18+  805A 11 11 00             ld de,$11
 19+  805D 19                   add hl,de
 20+  805E 0E 04                ld c,4 ;declaramos c para el siguiente bucle
 21+  8060              bucleaux: ;este bucle realizará los slots.
 22+  8060 3E 09                ld a,$09 ;cargo el color azul en a
 23+  8062 77                   ld (hl),a ;lo metemos en la posición de hl para que lo pinte
 24+  8063 23                   inc hl ;incremento hl para meter el siguiente color
 25+  8064 3E 01                ld a,$01 ;cargo negro en a
 26+  8066 77                   ld(hl),a ;cargo en la posición de hl para que  lo pinte
 27+  8067 23                   inc hl ; incremento hl para meter el siguiente color
 28+  8068 0D                   dec c ; decremento c para que haga 4 veces el bucle
 29+  8069 20 F5                jr nz,bucleaux ;utilizo jr nz para que coja c como variable
 30+  806B
 31+  806B 3E 09                ld a,$09 ;Cargo el color azul otra vez para realizar la evaluación de aciertos
 32+  806D 77                   ld (hl),a ;Cargo en hl,que será el borde del rectangulo
 33+  806E 23                   inc hl
 34+  806F 3E 01                ld a,$01 ;Cargo el color negro y a continuación realizo un bucle donde me pinte los 5 de color negro
 35+  8071 0E 05                ld c,5
 36+  8073              bucleaux2:
 37+  8073 77                   ld (hl),a
 38+  8074 23                   inc hl
 39+  8075 0D                   dec c
 40+  8076 20 FB                jr nz,bucleaux2
 41+  8078 3E 09                ld a,$09 ;Vuelvo a cargar en azul para realizar el borde
 42+  807A 77                   ld (hl),a
 43+  807B 0E 12                ld c,18;
 44+  807D              buclepr2:
 45+  807D 23                   inc hl;
 46+  807E 0D                   dec c;
 47+  807F 20 FC                jr nz,buclepr2
 48+  8081 10 CE                djnz bucleext; Finaliza el bucle principal,donde pintará todo menos la ultima linea inferior
 49+  8083 0E 0F                ld c,15 ;Cargo 15 en c para que me haga la linea 15 pixeles
 50+  8085              bucleinf: ;hago el bucle para que pinte las 15 lineas
 51+  8085 77                   ld(hl),a
 52+  8086 23                   inc hl
 53+  8087 0D                   dec c
 54+  8088 20 FB                jr nz,bucleinf ;finaliza el bucle de la linea inferior
 55+  808A C9                   RET
# file closed: c:\Users\cpujo\Desktop\Aoc\MasterMind\pantalla.asm
 59   808B                      include "Teclado.asm"
# file opened: c:\Users\cpujo\Desktop\Aoc\MasterMind\Teclado.asm
  1+  808B              JugarSlot:
  2+  808B 1E 00                ld e,$00;funcion que usaremos para que nos almacene cada color
  3+  808D              bucleteclas:
  4+  808D CD 98 80         CALL EsperarSoltar;llamamos a la funcion EsperarSoltar
  5+  8090 CD A1 80         CALL EsperarPulsar
  6+  8093
  7+  8093
  8+  8093 FE 01            cp $01;Si a se pone a $01 se termina el bucle
  9+  8095 20 F6            jr nz,bucleteclas;
 10+  8097 C9                   RET
 11+  8098              EsperarSoltar:;se comprueba si la tecla q es pulsada
 12+  8098 3E FB                ld a,$fb
 13+  809A DB FE                in a,($fe)
 14+  809C FE FF                cp $FF   ;comprobamos si toda la fila está pulsada
 15+  809E 20 F8                jr nz,EsperarSoltar;el bucle sigue hasta que se dejen de pulsar las teclas
 16+  80A0 C9                   RET
 17+  80A1
 18+  80A1              EsperarPulsar:
 19+  80A1 3E FB                ld a,$fb
 20+  80A3 DB FE                in a,($fe)
 21+  80A5 CB 47                bit 0,a;Tecla Q
 22+  80A7 28 12                jr z,TeclaQPulsada;comprobamos que la tecla q está pulsada,si pulsa salta a la función
 23+  80A9 3E FB                ld a,$fb
 24+  80AB DB FE                in a,($fe)
 25+  80AD CB 4F                bit 1,a;tecla W
 26+  80AF 28 14                jr z,TeclaWPulsada;comprobamos que la tecla w está pulsada,si pulsa salta a la función
 27+  80B1 3E FB                ld a,$fb
 28+  80B3 DB FE                in a,($fe)
 29+  80B5 CB 67                bit 4,a;Tecla T
 30+  80B7 28 16                jr z,TeclaTPulsada; comprobamos que la tecla t está pulsada,si pulsa salta a la función
 31+  80B9 18 E6                jr EsperarPulsar; el bucle no para hasta pulsar una tecla
 32+  80BB
 33+  80BB              TeclaQPulsada:;entra aqui si esta pulsando una tecla q
 34+  80BB 7B                   ld a,e
 35+  80BC C6 08               add $08;sumamos el color a e
 36+  80BE 77                   ld(hl),a
 37+  80BF 5F                   ld e,a
 38+  80C0 FE 40               cp $40; si pasa el ultimo color salta al ReinicioColor1 que pone el color de e al primer color
 39+  80C2 28 0E               jr z,ReinicioColor1
 40+  80C4 C9                   RET
 41+  80C5
 42+  80C5              TeclaWPulsada:
 43+  80C5 7B                   ld a,e
 44+  80C6 D6 08                sub $08;al pusar la tecla w,restamos el color a e
 45+  80C8 77                   ld(hl),a
 46+  80C9 5F                   ld e,a
 47+  80CA FE 00                cp $00; si llega al primero,reiniciamos el color para que llegue al último
 48+  80CC 28 08                jr z,ReinicioColor2
 49+  80CE C9                   RET
 50+  80CF              TeclaTPulsada:;si pulsa la tecla t a=1,lo usaremos para finalizar el programa
 51+  80CF 3E 01                ld a,1
 52+  80D1 C9                   RET
 53+  80D2
 54+  80D2              ReinicioColor1:;Esta tecla pone el color e al principio
 55+  80D2 1E 00                ld e,$00
 56+  80D4 28 CB                jr z,EsperarPulsar
 57+  80D6              ReinicioColor2:;Esta tecla pone el color e al final
 58+  80D6 1E 32                ld e,$32
 59+  80D8 28 C7                jr z,EsperarPulsar
# file closed: c:\Users\cpujo\Desktop\Aoc\MasterMind\Teclado.asm
 60   80DA                      include "printat.asm"
# file opened: c:\Users\cpujo\Desktop\Aoc\MasterMind\printat.asm
  1+  80DA              ; -------------------------------
  2+  80DA              ; ZX Spectrum Text print library
  3+  80DA              ; Daniel León - AOC - UFV 2020
  4+  80DA              ; -------------------------------
  5+  80DA
  6+  80DA
  7+  80DA              ; ----------------------------------------------------------------------------------------
  8+  80DA              ; PRINTAT - Print a string in a position and attributes as per registers:
  9+  80DA              ;		IN	A	: Bit 7=1 For Flash / Bit 6=1 For Brigh / Bit 5,4,3 for Paper / Bit 2,1,0 for Ink
 10+  80DA              ;		IN	B	: Row 0..23
 11+  80DA              ;		IN	C	: Column 0..31
 12+  80DA              ;		IN	IX	: Address of text (Text must end in a 0)
 13+  80DA              ; ----------------------------------------------------------------------------------------
 14+  80DA CD E9 80     PRINTAT:	CALL PREP_PRT				; Update Attribute var &Screen & Attributes pointers
 15+  80DD              ; ----------------------------------------------------------------------------------------
 16+  80DD              ;		VVV Do not move PRINTSTR below as PRINTAT continues into PRINTSTR routine
 17+  80DD              ; ----------------------------------------------------------------------------------------
 18+  80DD              ; PRINTSTR - Prints String - IX Points to the String start
 19+  80DD              ; ----------------------------------------------------------------------------------------
 20+  80DD DD 7E 00     PRINTSTR:   LD A,(IX)					; A Contains first char to print
 21+  80E0 B7           			OR A						; check for end of string (0)
 22+  80E1 C8           			RET Z						; Finish printing if 0
 23+  80E2 CD 17 81     			CALL PRINTCHNUM
 24+  80E5 DD 23        			INC IX						; Move to next char in string
 25+  80E7 18 F4        			JR PRINTSTR					; Start over printing sequence
 26+  80E9              ; ----------------------------------------------------------------------------------------
 27+  80E9
 28+  80E9
 29+  80E9              ;-----------------------------------------------------------------------------------------
 30+  80E9              ; PREP_PRT - Updates Print_Attr, SCR & ATTR Vars
 31+  80E9              ;-----------------------------------------------------------------------------------------
 32+  80E9 32 5D 81     PREP_PRT:	LD (PRINT_ATTR),A			; Set Attribute
 33+  80EC CD F2 80     PREP_PRT_2:	CALL CRtoSCREEN
 34+  80EF C3 04 81     			JP CRtoATTR
 35+  80F2              ;-----------------------------------------------------------------------------------------
 36+  80F2
 37+  80F2              ;-----------------------------------------------------------------------------------------
 38+  80F2              ; CRtoSCREEN - Converts a scr char coord into a SCREEN Address   b,c = y,x positions
 39+  80F2              ;	IN  - B=Row, C=Column
 40+  80F2              ;	OUT - HL=Address in screen also stored in (SCR_CUR_PTR)
 41+  80F2              ;	Conversion:
 42+  80F2              ;			Row FFfff   Column CCCCC
 43+  80F2              ;			HL=%010FF000 fffCCCCC
 44+  80F2              ;-----------------------------------------------------------------------------------------
 45+  80F2              CRtoSCREEN:
 46+  80F2 78           			LD A,B						; %___FFfff
 47+  80F3 F6 40        			OR #40						; %010FFfff
 48+  80F5 E6 F8        			AND #F8						; %010FF000
 49+  80F7 67           			LD H,A
 50+  80F8
 51+  80F8 78           			LD A,B						; %___FFfff
 52+  80F9 E6 07        			AND #7						; %00000fff
 53+  80FB 0F           			RRCA						; %f00000ff
 54+  80FC 0F           			RRCA						; %ff00000f
 55+  80FD 0F           			RRCA						; %fff00000
 56+  80FE B1           			OR C						; %fffCCCCC
 57+  80FF 6F           			LD L,A
 58+  8100 22 59 81                 LD (SCR_CUR_PTR),HL			; Update Variable
 59+  8103 C9                       RET
 60+  8104              ; ----------------------------------------------------------------------------------------
 61+  8104
 62+  8104
 63+  8104
 64+  8104              ;-----------------------------------------------------------------------------------------
 65+  8104              ; CRtoATTR - Converts a screen char coord  into a ATTR Address  b,c = y,x positions
 66+  8104              ;	IN  - B=Row, C=Column
 67+  8104              ;	OUT - HL=Address in screen also stored in (SCR_ATTR_PTR)
 68+  8104              ;	Conversion:
 69+  8104              ;			Row FFfff   Column CCCCC
 70+  8104              ;			HL=%010110FF fffCCCCC
 71+  8104              ;-----------------------------------------------------------------------------------------
 72+  8104              CRtoATTR:
 73+  8104 78           			LD A,B						; %___FFfff
 74+  8105 0F           			RRCA						; %f000FFff
 75+  8106 0F           			RRCA						; %ff000FFf
 76+  8107 0F           			RRCA						; %fff000FF
 77+  8108 6F           			LD L,A
 78+  8109 E6 03        			AND 3						; %000000FF	value of FF can be only 00,01,10
 79+  810B F6 58        			OR #58						; %010110FF value will be #58, #59 or #5A
 80+  810D 67           			LD H,A
 81+  810E
 82+  810E 7D           			LD A,L						; %fff000FF
 83+  810F E6 E0        			AND #E0						; %fff00000
 84+  8111 B1           			OR C						; %fffCCCCC
 85+  8112 6F           			LD L,A
 86+  8113
 87+  8113 22 5B 81                 LD (SCR_ATTR_PTR),HL		; Update Variable
 88+  8116 C9                       RET
 89+  8117              ; ----------------------------------------------------------------------------------------
 90+  8117
 91+  8117
 92+  8117
 93+  8117              ; ----------------------------------------------------------------------------------------
 94+  8117              ; PRINTCHNUM - Prints Char Number N (stored in A)
 95+  8117              ;-----------------------------------------------------------------------------------------
 96+  8117              PRINTCHNUM:	;SUB 32						; Adjust Ascii to charset
 97+  8117 26 00        			LD H,0						; Multiply value by 8 to get to right Char in Charset
 98+  8119 6F           			LD L,A
 99+  811A 29           			ADD HL,HL
100+  811B 29           			ADD HL,HL
101+  811C 29           			ADD HL,HL
102+  811D 11 5E 80     			LD DE, CHARSET-(8*32)		; Optimize in compile time (instead of sub 32)
103+  8120 19           			ADD HL,DE
104+  8121 EB           			EX  DE,HL					;Value in DE
105+  8122              			; Continues to printchar below
106+  8122              ; ----------------------------------------------------------------------------------------
107+  8122
108+  8122
109+  8122              ; ----------------------------------------------------------------------------------------
110+  8122              ; PRINTCHAR - Prints Char  (DE points to the char. Uses HL as last Cur Pointer)
111+  8122              ; ----------------------------------------------------------------------------------------
112+  8122              PRINTCHAR:
113+  8122 06 08        			LD B,8						; 8 Lines per char
114+  8124 2A 59 81                 LD HL, (SCR_CUR_PTR)		; Load Cursor Pointer y,x
115+  8127
116+  8127 1A           BYTEPCHAR:	LD A,(DE)					; Get Char to be printed, first line
117+  8128 77           			LD (HL),A					; Move to Printing location
118+  8129 24                       INC H						; inc H so next line in char (ZX Spectrum Screen RAM)
119+  812A 13                       INC DE 						; next line to be printed
120+  812B 10 FA                    DJNZ BYTEPCHAR				; Repeat 8 lines
121+  812D 3A 5D 81                 LD A,(PRINT_ATTR) 			; Load Attributes to print char with
122+  8130 2A 5B 81                 LD HL, (SCR_ATTR_PTR)
123+  8133 77                       LD (HL),A
124+  8134 21 5B 81                 LD HL, SCR_ATTR_PTR			; Get pointer to ATTR
125+  8137 34                       INC (HL)					; Move Attribute cursor to next char
126+  8138 21 59 81     			LD HL, SCR_CUR_PTR
127+  813B 34           			INC (HL)					; update Cursor pointer to next position
128+  813C C9                       RET
129+  813D              ; ----------------------------------------------------------------------------------------
130+  813D
131+  813D
132+  813D
133+  813D              ; ----------------------------------------------------------------------------------------
134+  813D              ; INK2PAPER - moves ink of attribute stored in (PRINT_ATTR) to paper and sets ink to 0
135+  813D              ; 				Sets bright 1 and flash 0
136+  813D              ; ----------------------------------------------------------------------------------------
137+  813D 3A 5D 81     INK2PAPER:	LD A, (PRINT_ATTR)		    ; Get storedAttribute
138+  8140 E6 07                    AND 7						; get Attr INK in A
139+  8142 07           			RLCA
140+  8143 07           			RLCA
141+  8144 07           			RLCA						; move Ink to Paper
142+  8145 F6 40        			OR 64						; ink 0 bright 1
143+  8147 32 5D 81     			LD (PRINT_ATTR),A		    ; Get storedAttribute
144+  814A C9           			RET
145+  814B              ; ----------------------------------------------------------------------------------------
146+  814B
147+  814B
148+  814B
149+  814B
150+  814B 21 00 40     CLEARSCR:	LD HL,$4000					; Erases screen by writing 0 to all pixels and attributes
151+  814E 11 01 40     			LD DE,$4001
152+  8151 01 FF 1A     			LD BC,6911
153+  8154 36 00        			LD (HL),0
154+  8156 ED B0        			LDIR
155+  8158 C9           			RET
156+  8159
157+  8159
158+  8159              SCR_CUR_PTR
158+  8159 00 00          	db $00, $00				; Cursor Pointer in Screen (2 bytes) (HL)
159+  815B 00 00        SCR_ATTR_PTR: 	db $00, $00				; Attr Pointer in Screen (2 bytes) (HL)
160+  815D 00           PRINT_ATTR:		db $00					; Attribute used by printchar routine (1 byte)
161+  815E
162+  815E              CHARSET: incbin "charset.bin"			; Charset used
163+  845E
# file closed: c:\Users\cpujo\Desktop\Aoc\MasterMind\printat.asm
 61   845E                      include "Intento.asm"
# file opened: c:\Users\cpujo\Desktop\Aoc\MasterMind\Intento.asm
  1+  845E              Texto1Pint:
  2+  845E 0E 00            ld c,0
  3+  8460 06 00            ld b,0
  4+  8462 3E 46            ld a,%01000110
  5+  8464 DD 21 38 85      ld ix,Texto1
  6+  8468 CD DA 80         call PRINTAT
  7+  846B 0E 00            ld c,0
  8+  846D 06 00            ld b,0
  9+  846F 3E 06            ld a,%00000110
 10+  8471 DD 21 38 85      ld ix,Texto1
 11+  8475 C9               RET
# file closed: c:\Users\cpujo\Desktop\Aoc\MasterMind\Intento.asm
 62   8476                      include "validacion.asm"
# file opened: c:\Users\cpujo\Desktop\Aoc\MasterMind\validacion.asm
  1+  8476
  2+  8476              ;pos inicial intento: 5849 ; +2, 3veces
  3+  8476              ;pos inicial respuesta: 5851 ; +1, 3veces
  4+  8476
  5+  8476              ;--------------- VALIDAR -------------------------
  6+  8476
  7+  8476
  8+  8476
  9+  8476              reset_copia:
 10+  8476                      ;COPIAR
 11+  8476 01 04 00             LD BC, num_slots ;num_slots numero cuadrados en cada intento
 12+  8479 21 48 85             LD HL, quiz
 13+  847C 11 4C 85             LD DE, copia
 14+  847F ED B0                LDIR ;copio BC n? de slots de HL en DE
 15+  8481
 16+  8481 3A 50 85             LD A,(negros)
 17+  8484 5F                   LD E,A
 18+  8485 DD 21 44 85          LD IX, intento ;ix usualmente para leer db
 19+  8489                      ;datos de entrada no deber?an tocarse
 20+  8489 FD 21 4C 85          LD IY, copia   ;iy tb
 21+  848D
 22+  848D
 23+  848D 06 04                LD B, num_slots
 24+  848F 0E 04                LD C, 4;para que en la pasada de blancos me haga las 4 pasadas de IX nada m?s (el de copia)
 25+  8491
 26+  8491              B1:;COINCIDENCIAS EXACTAS
 27+  8491 DD 7E 00             LD A, (IX);cargo el primer elemento en a
 28+  8494 FD 56 00             LD D, (IY);cargo el primer elemento en d
 29+  8497
 30+  8497 BA                   CP D;comparo D con A
 31+  8498
 32+  8498 20 09                JR NZ, B2; si no coincide salto a B2
 33+  849A
 34+  849A 1C                   INC E;aumento contador de negros
 35+  849B
 36+  849B                      ;entra bien aqui solo en elementos coincidentes
 37+  849B
 38+  849B                      ;al coincidir se cambia pero solo se busca la primera coincidencia no las de despues
 39+  849B                      ;creo que asi me va a leer la coincidencia en el bucle anidado a lo mejor poner IX 128 e IY a 255
 40+  849B DD 36 00 80          LD (IX), 128;sustituye por 128,para evitar coindicencias adicionales.
 41+  849F FD 36 00 FF          LD (IY), 255;sustituye por 255,
 42+  84A3              B2:;PARA PASAR A LA SIGUIENTE
 43+  84A3 DD 23                INC IX;siguiente elemento de la lista
 44+  84A5 FD 23                INC IY;siguiente elemento de la lista
 45+  84A7
 46+  84A7
 47+  84A7 10 E8                DJNZ B1
 48+  84A9              ; Acabo b1 y reseteo a posicion inicial IX e IY
 49+  84A9
 50+  84A9 7B                   LD A, E;Negros,Guardar los aciertos exactos.
 51+  84AA 32 50 85             LD (negros), A;guardo el n? negros
 52+  84AD 3A 50 85             LD A, (negros)
 53+  84B0
 54+  84B0
 55+  84B0                      ;obtengo el n? de negros y lo guardo en e
 56+  84B0 3A 51 85             LD A,(blancos);blancos son los aciertos no exactos.
 57+  84B3 5F                   LD E, A;
 58+  84B4
 59+  84B4 06 04                LD B, num_slots;reseteamos b
 60+  84B6              reset1_IXIY:
 61+  84B6 DD 2B                DEC IX
 62+  84B8 FD 2B                DEC IY
 63+  84BA 10 FA                DJNZ reset1_IXIY
 64+  84BC
 65+  84BC              carga_pre_comp:
 66+  84BC 06 04                LD B, num_slots
 67+  84BE
 68+  84BE              CompBlanco1:;comparo para encontrar blancos
 69+  84BE
 70+  84BE                      ;carga en a y d para que siempre tengan los ultimos valores de ix
 71+  84BE DD 7E 00             LD A, (IX);cargo el primer elemento en a
 72+  84C1 FD 56 00             LD D, (IY);cargo el primer elemento en d
 73+  84C4
 74+  84C4 BA                   CP D;comparo D con A
 75+  84C5
 76+  84C5 20 09                JR NZ, CompBlanco2 ;si no son iguales salto a
 77+  84C7
 78+  84C7 1C                   INC E;registro ? (E es para que compile) que representa los blancos
 79+  84C8
 80+  84C8                      ;INC IX      si encuentro coincidencia no puede haber otra con el mismo numero entonces hago salto
 81+  84C8 DD 36 00 80          LD (IX), 128;sustituye por 128
 82+  84CC FD 36 00 FF          LD (IY), 255;sustituye por 128
 83+  84D0
 84+  84D0
 85+  84D0
 86+  84D0                      ;esto se deberia hacer pero entonces deberia controlar el numero de pasadas que hacer de iy
 87+  84D0                      ;JR reset2_IY hago el salto porque una vez encontrdo coincidencia
 88+  84D0
 89+  84D0              CompBlanco2:;Incremento la posici?n de IY 4 veces por posicion de IX y luego aumento IX 4 veces
 90+  84D0 FD 23                INC IY;incremento 1
 91+  84D2
 92+  84D2 10 EA                DJNZ CompBlanco1;cuando he recorrido todo IY paso al siguiente IX
 93+  84D4 DD 23                INC IX
 94+  84D6
 95+  84D6
 96+  84D6 06 04                LD B, num_slots;reseteamos b
 97+  84D8              reset2_IY:
 98+  84D8 FD 2B                DEC IY
 99+  84DA 10 FC                DJNZ reset2_IY
100+  84DC                      ;aqui ya tengo la siguiente de la solucion pero para repetir necesito un registro
101+  84DC
102+  84DC              ;------------------------- Solucionar
103+  84DC
104+  84DC                      ;que registro?
105+  84DC                      ;DEC registro;aqui disminuyes un registro que guarde numero de slots contador para IX hasta pasar por todo IX
106+  84DC 0D                   DEC C
107+  84DD              ;------------------------
108+  84DD
109+  84DD 20 DD                JR NZ, carga_pre_comp
110+  84DF
111+  84DF                      ;guardo numero de blancos en A para almacenarlo en la variable blancos
112+  84DF 7B                   LD A, E
113+  84E0 32 51 85             LD (blancos), A
114+  84E3
115+  84E3 C9                   RET
116+  84E4
117+  84E4
# file closed: c:\Users\cpujo\Desktop\Aoc\MasterMind\validacion.asm
 63   84E4                      include "PintarValidacion.asm"
# file opened: c:\Users\cpujo\Desktop\Aoc\MasterMind\PintarValidacion.asm
  1+  84E4              PintarColor:
  2+  84E4 11 08 00         ld de,$08;incremento 6 veces para llegar al espacio de validacion
  3+  84E7 19               add hl,de;se lo sumo a hl
  4+  84E8 CD F2 84         CALL Comprobarnegros;llamo a la función comprobar negros
  5+  84EB CD FB 84         CALL ComprobarBlancos;llamos a la función comprobar blancos
  6+  84EE CD 10 85         CALL ReinicioNyB;una vez pintados, los reinicio.
  7+  84F1 C9               RET
  8+  84F2
  9+  84F2              Comprobarnegros:;esta función comprueba si existen negros.
 10+  84F2
 11+  84F2 3A 50 85         ld a,(negros)
 12+  84F5 47               ld b,a
 13+  84F6 FE 00            CP 0;si existen negros los pinta saltando a la función pintar negros.
 14+  84F8 20 0A            jr nz,pintarnegros
 15+  84FA C9               RET
 16+  84FB              ComprobarBlancos:;está función compreuba si existen blancos.
 17+  84FB 3A 51 85         ld a,(blancos)
 18+  84FE 47               ld b,a
 19+  84FF FE 00            CP 0;si existen blancos los pinta saltando a la función pintar blancos.
 20+  8501 20 07            jr nz,pintarBlancos
 21+  8503 C9               RET
 22+  8504
 23+  8504
 24+  8504              pintarnegros:
 25+  8504              bucle:;realizo el bucle tantas veces como negros haya
 26+  8504 36 10            ld (hl),$10;los pinto de rojo
 27+  8506 23               inc hl;incremento hl para ponerlos al lado.
 28+  8507 10 FB            djnz bucle
 29+  8509 C9               RET
 30+  850A
 31+  850A              pintarBlancos:
 32+  850A              bucle2:;realizo el bucle tantas veces como blancos haya
 33+  850A 36 38            ld (hl),$38;los pintos de blanco.
 34+  850C 23               inc hl;incremento hl para ponerlos al lado.
 35+  850D 10 FB            djnz bucle2
 36+  850F C9               RET
 37+  8510              ReinicioNyB:;reiniciamos porque si no en la siguiente jugada se acumularía.
 38+  8510 3E 00            ld a,0
 39+  8512 32 51 85         ld (blancos),a;ponremos blancos a 0
 40+  8515 32 50 85         ld (negros),a;ponemos negros a 0
 41+  8518 C9               RET
 42+  8519              FuncionVictoria:;comprueba si hay 4 negros,es decir, si se ha acertado la posición y el color de los 4
 43+  8519 3A 50 85         ld a,(negros)
 44+  851C FE 04            CP $04
 45+  851E              ;metemos la funcion de win
 46+  851E
 47+  851E C9               RET
# file closed: c:\Users\cpujo\Desktop\Aoc\MasterMind\PintarValidacion.asm
 64   851F                      include "SlotXY.asm"
# file opened: c:\Users\cpujo\Desktop\Aoc\MasterMind\SlotXY.asm
  1+  851F              slot_XY:
  2+  851F 21 49 58             ld hl,$5849;slot1
  3+  8522 3A 41 85             ld a,(intento_actual);mete el numero de intento en a
  4+  8525
  5+  8525 11 40 00             ld de,$40; de lo uso para sumar
  6+  8528 47                    ld b,a;b es igual a
  7+  8529              BucleFila:
  8+  8529 19                   add hl,de
  9+  852A 10 FD                djnz BucleFila
 10+  852C C9                   RET
 11+  852D
# file closed: c:\Users\cpujo\Desktop\Aoc\MasterMind\SlotXY.asm
 65   852D                      include "pausa.asm"
# file opened: c:\Users\cpujo\Desktop\Aoc\MasterMind\pausa.asm
  1+  852D              pause:
  2+  852D 21 10 27         ld hl,10000
  3+  8530              pausabucle:
  4+  8530 2B               dec hl
  5+  8531 7C               ld a,h
  6+  8532 F6 00            or 0
  7+  8534 C2 30 85         jp nz,pausabucle
  8+  8537 C9               RET
  9+  8538
# file closed: c:\Users\cpujo\Desktop\Aoc\MasterMind\pausa.asm
 66   8538              ;Declaramos las variables y el texto a utilizar.
 67   8538 55 46 56 2D  Texto1: defm "UFV-2022",0
 67   853C 32 30 32 32
 67   8540 00
 68   8541
 69   8541 00 00 00     intento_actual DB 0,0,0;se guarda en el primer 0 el intento(ld(intento),a->numero de intentos,se saca ld a ,(intento),el segundo 0 es la posicion del primer slot,el tercer 0 es la posición del espacio de validación)
 70   8544 00 00 00 00  intento DB 0, 0, 0, 0;Intento jugador
 71   8548 20 28 30 10  quiz DB $20, $28, $30, $10;Combinacion ganadora,(verde claro,azul claro,amarillo,rojo)
 72   854C
 73   854C 00 00 00 00  copia DB 0, 0, 0, 0;copia quiz
 74   8550 00           negros DB 0;aciertos
 75   8551 00           blancos DB 0;color pero no la posicion
 76   8552
 77   8552              num_slots EQU 4;variable
 78   8552
# file closed: c:\Users\cpujo\Desktop\Aoc\MasterMind\plantilla.asm
